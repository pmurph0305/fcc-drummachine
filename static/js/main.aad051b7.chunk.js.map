{"version":3,"sources":["DrumPad/DrumPad.js","DrumMachine/DrumMachine.js","App.js","serviceWorker.js","index.js"],"names":["DrumPad","onKeyDown","event","key","toUpperCase","_this","props","keyVal","onClick","document","getElementById","play","onPlaySound","keyIndex","addEventListener","this","removeEventListener","_this$props","audioDesc","fileName","react_default","a","createElement","className","id","src","process","type","React","Component","DrumKeys","DrumMachine","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","index","length","setState","display","state","_this2","map","drum","src_DrumPad_DrumPad","htmlFor","App","src_DrumMachine_DrumMachine","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kSA6CeA,oNAzBbC,UAAY,SAACC,GACPA,EAAMC,IAAIC,gBAAkBC,EAAKC,MAAMC,QACzCF,EAAKG,aAKTA,QAAU,WACWC,SAASC,eAAeL,EAAKC,MAAMC,QACzCI,OACbN,EAAKC,MAAMM,YAAYP,EAAKC,MAAMO,8FAtBlCJ,SAASK,iBAAiB,UAAWC,KAAKd,0DAI1CQ,SAASO,oBAAoB,UAAWD,KAAKd,4CAqBtC,IAAAgB,EAC6BF,KAAKT,MAApCC,EADEU,EACFV,OAAQW,EADND,EACMC,UAAWC,EADjBF,EACiBE,SAC1B,OACEC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,WAAWC,GAAIN,EAAWV,QAASO,KAAKP,SACzDD,EAECa,EAAAC,EAAAC,cAAA,SAAOC,UAAU,OAAOC,GAAIjB,EAASkB,IAAKC,gCAAwCP,EAAUQ,KAAK,sBAlCjFC,IAAMC,YCKtBC,SAAW,CACf,CAAC3B,IAAK,IAAKe,UAAW,YAAaC,SAAS,iBAC5C,CAAChB,IAAK,IAAKe,UAAW,eAAgBC,SAAS,oBAC/C,CAAChB,IAAK,IAAKe,UAAW,YAAaC,SAAS,iBAC5C,CAAChB,IAAK,IAAKe,UAAW,WAAYC,SAAS,gBAC3C,CAAChB,IAAK,IAAKe,UAAW,YAAaC,SAAS,iBAC5C,CAAChB,IAAK,IAAKe,UAAW,aAAcC,SAAS,kBAC7C,CAAChB,IAAK,IAAKe,UAAW,iBAAkBC,SAAS,sBACjD,CAAChB,IAAK,IAAKe,UAAW,aAAcC,SAAS,kBAC7C,CAAChB,IAAK,IAAKe,UAAW,iBAAkBC,SAAS,wBAyCpCY,cApCb,SAAAA,EAAYzB,GAAO,IAAAD,EAAA,OAAA2B,OAAAC,EAAA,EAAAD,CAAAjB,KAAAgB,IACjB1B,EAAA2B,OAAAE,EAAA,EAAAF,CAAAjB,KAAAiB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAArB,KAAMT,KASRM,YAAc,SAACyB,GACTA,EAAQP,EAASQ,QACnBjC,EAAKkC,SAAS,CAACC,QAASV,EAASO,GAAOnB,aAR1Cb,EAAKoC,MAAQ,CACXD,QAAS,QALMnC,wEAgBV,IAAAqC,EAAA3B,KACP,OAGEK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeC,GAAG,gBAC/BJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACZO,EAASa,IAAI,SAACC,EAAMP,GAAP,OAAiBjB,EAAAC,EAAAC,cAACuB,EAAD,CAAS1C,IAAKyC,EAAKzC,IAAKI,OAAQqC,EAAKzC,IAAKe,UAAW0B,EAAK1B,UAAWC,SAAUyB,EAAKzB,SAAUP,YAAa8B,EAAK9B,YAAaC,SAAUwB,QAG1KjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BAEbH,EAAAC,EAAAC,cAAA,SAAOwB,QAAQ,UAAUvB,UAAU,sBAAnC,cACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeC,GAAG,WAAWT,KAAK0B,MAAMD,kBA/BrCZ,IAAMC,WCNjBkB,0LARX,OACE3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC0B,EAAD,cAJUpB,IAAMC,YCMJoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAAS/C,SAASC,eAAe,SD2H3C,kBAAmB+C,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.aad051b7.chunk.js","sourcesContent":["import React from 'react';\r\nimport './DrumPad.css';\r\n\r\n\r\n\r\nclass DrumPad extends React.Component {\r\n\r\n  componentDidMount() {\r\n    document.addEventListener(\"keydown\", this.onKeyDown);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"keydown\", this.onKeyDown);\r\n  }\r\n\r\n  // User Story #6: When I press the trigger key associated with each .drum-pad,\r\n  // the audio clip contained in its child audio element should be triggered \r\n  //(e.g. pressing the Q key should trigger the drum pad which contains \r\n  //the string \"Q\", pressing the W key should trigger the drum pad which\r\n  // contains the string \"W\", etc.).\r\n  onKeyDown = (event) => {\r\n    if (event.key.toUpperCase() === this.props.keyVal) {\r\n      this.onClick();\r\n    }\r\n  }\r\n  // User Story #5: When I click on a .drum-pad element, \r\n  //the audio clip contained in its child audio element should be triggered.\r\n  onClick = () => {\r\n    let audioElement = document.getElementById(this.props.keyVal);\r\n    audioElement.play();\r\n    this.props.onPlaySound(this.props.keyIndex);\r\n  }\r\n\r\n  render() {\r\n  const {keyVal, audioDesc, fileName} = this.props;\r\n  return (\r\n    <button className=\"drum-pad\" id={audioDesc} onClick={this.onClick}>\r\n    {keyVal}\r\n    {/*  Within each .drum-pad, there should be an HTML5 <audio> element which has a src attribute pointing to an audio clip, a class name of \"clip\", and an id corresponding to the inner text of its parent .drum-pad (e.g. id=\"Q\", id=\"W\", id=\"E\" etc.). */}\r\n      <audio className=\"clip\" id={keyVal}  src={process.env.PUBLIC_URL +\"/DrumSamples/\"+fileName} type=\"audio/wav\"/>\r\n    </button>\r\n  )\r\n  }\r\n}\r\n\r\nexport default DrumPad;","import React from 'react';\r\n\r\nimport DrumPad from '../DrumPad/DrumPad';\r\n\r\nimport './DrumMachine.css';\r\n\r\n//  User Story #3: Within #drum-machine I can see 9 clickable drum pad elements, each with a class name of drum-pad,\r\n//  a unique id that describes the audio clip the drum pad will be set up to trigger,\r\n//  and an inner text that corresponds to one of the following keys on the keyboard: Q, W, E, A, S, D, Z, X, C. \r\n//  The drum pads MUST be in this order.\r\nconst DrumKeys = [\r\n  {key: \"Q\", audioDesc: \"Clap Clap\", fileName:\"Clap-clap.wav\"},\r\n  {key: \"W\", audioDesc: \"Quarter Clap\", fileName:\"Quarter-clap.wav\"},\r\n  {key: \"E\", audioDesc: \"Taxi Clap\", fileName:\"Taxi-clap.wav\"},\r\n  {key: \"A\", audioDesc: \"Damn Hat\", fileName:\"Damn-hat.wav\"},\r\n  {key: \"S\", audioDesc: \"Kraft Hat\", fileName:\"Kraft-hat.wav\"},\r\n  {key: \"D\", audioDesc: \"Superb Hat\", fileName:\"Superb-hat.wav\"},\r\n  {key: \"Z\", audioDesc: \"Dynamite Snare\", fileName:\"Dynamite-snare.wav\"},\r\n  {key: \"X\", audioDesc: \"Lame Snare\", fileName:\"Lame-snare.wav\"},\r\n  {key: \"C\", audioDesc: \"Hashbrown Kick\", fileName:\"Hashbrown-kick.wav\"},\r\n]\r\n\r\nclass DrumMachine extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    // User Story #7: When a .drum-pad is triggered, a string describing the associated audio clip is displayed as\r\n    // the inner text of the #display element (each string must be unique).\r\n    this.state = {\r\n      display: 'None'\r\n    }\r\n  }\r\n\r\n\r\n  onPlaySound = (index) => {\r\n    if (index < DrumKeys.length) {\r\n      this.setState({display: DrumKeys[index].audioDesc})\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      // User Story #1: I should be able to see an outer container\r\n      // with a corresponding id=\"drum-machine\" that contains all other elements.\r\n      <div className=\"drum-machine\" id=\"drum-machine\">\r\n        <div className=\"drum-key-container\">\r\n          <div className=\"drum-key-grid\">\r\n            {DrumKeys.map((drum, index) => <DrumPad key={drum.key} keyVal={drum.key} audioDesc={drum.audioDesc} fileName={drum.fileName} onPlaySound={this.onPlaySound} keyIndex={index}/>)}\r\n          </div>\r\n        </div>\r\n        <div className=\"drum-display-container\">\r\n        {/* User Story #2: Within #drum-machine I can see an element with a corresponding id=\"display\". */}\r\n          <label htmlFor=\"display\" className=\"drum-display-label\">Last Sound</label>\r\n          <p className=\"drum-display\" id=\"display\">{this.state.display}</p>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default DrumMachine;","import React from 'react';\n\nimport DrumMachine from './DrumMachine/DrumMachine';\n\nimport './App.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <DrumMachine/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}